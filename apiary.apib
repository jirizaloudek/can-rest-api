FORMAT: 1A
HOST: https://secure.cleveranalytics.com

# CleverAnalytics
# Group Authentication
CleverAnalytics uses OAuth as an authentication protocol.
Authorization process has two steps:

Firstly, you provide an user email and password to get an unique refresh token with validity during the browser session or 90 days (remember me). There can be more then one active refresh token for your account at the same time. Thanks to it you can use separate refresh tokens in your laptop, mobile phone and tablet application.
Refresh token is set as server cookie, with httpOnly flag - forbiden access from e.g. JS Client. 

Secondly, you will use the valid refresh token to obtain an access token that is necessary for authentication all request. There must be set a HTTP Header Authentication: Bearer... Access token is a JWT Token and  has a limited validity to 15 minutes, is encrypted, and can be very quickly verified by the resource servers.

For a realy detail inside into authentication see our [blog post](http://blog.cleveranalytics.com/post/106512852494/implementing-token-based-authentication-in-a).

## Error Codes
* 400001 - incorrect old password
* 400002 - unsupported language exception
* 400003 - access to account denied, bearer token does not match requested accountId
* 400004 - insuciffient OAuth scope. Scope does not contains all required properties.
* 400005 - update of last project admin denied. There needs to be always at least one user in Admin role in each project.


## Login [/rest/oauth/login]
### Login [POST]
Login resource verify your credentials and provide Account details and ApiKey.
Invalid user email or password.

+ Request (application/json)

        {
            "email": "john@cleveranalytics.com",
            "password": "SECRET_PASSWORD",
            "rememberMe": 1
        }

+ Response 200 (application/json)

    + Headers
    
            Set-Cookie: CA-ApiKeyToken={md5-apikey-id-and-secret}; path=/rest; secure; HttpOnly
        
    + Body
    
            {
                "id": "B3mTX6pCTRBSIMRej4q0",
                "fullName": "John Smith",
                "email": "john@cleveranalytics.com",
                "status": "ENABLED",
                "preferences": {
                    "language": "en",
                    "lastActiveProject": "/rest/projects/ncesksvg7rjeri7v"                
                },
                "links": [
                    {
                        "rel": "self",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0"
                    },
                    {
                        "rel": "password",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/password"
                    },
                    {
                        "rel": "preferences",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/preferences"
                    }
                ]
            }


+ Response 400 (application/json)

        {
            "timestamp": 1407139937053,
            "status": 400,
            "error": "Bad Request",
            "message": "Unauthorized. Not valid credentials.",
            "path": "/rest/oauth/login"
        }
        
### Logout [DELETE]
Log out the user and deletes all active ApiKeys. It means that user will be logged out all devices.
            
+ Request (application/json)

    + Headers
    
            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

### Social Login [/rest/oauth/socialLogin]
Authenticate to CleverAnalytics by Social OAuth2 instead of email and password.
Supported types of social networks and required scope (permissions):
* linkedIn 
    * required scope: *r_emailaddress, r_basicprofile*
    * more information: See more details about [LinkedIn Authentication](https://developer.linkedin.com/docs/oauth2)
* google
    * required scope: *profile, email*
    * more details about [Google Authentication](https://developers.google.com/accounts/docs/OAuth2)
* facebook
    * required scope: *email,public_profile*
    * more details about [Facebook Authentication](https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/)

#### Authentication by OAuth2 has two steps:

1. Send authentication request OAuth2 provider. This part is handled by Client and the following parameters are required:
    * *client_id* - identification of CleverAnalytics application generated by OAuth2 Provider
    * *redirect_uri* - uri where to be redirected after authentication - *https://secure.cleveranalytics.com/loginFacebook*
    * *scope* - required persissions. Minimal set is mentioned above.
    * *response_type* - CleverAnalytics support *code* type

1. Exchange obtained *code* to a real access token and return the authenticated Account. Just this operation is provided by this resource.    

#### Response statuses
* 200 - OK
* 400 - Bad request
##### Error Codes
    * 400004 - recaptcha invalid token


#### Social Login [POST]

+ Request (application/json)

        {
            "provider": "linkedin",
            "code": "jfnIeyJTE2fQrCBfdsafsdmGR97dsaDddjfgLCBerU5GHo5Nvdwujh",
            "redirectUri": "https://secure.cleveranalytics.com/loginLinkedIn"
        }
        
+ Response 200 (application/json)

    + Headers
    
            Set-Cookie: CA-ApiKeyToken={md5-apikey-id-and-secret}; path=/rest; secure; HttpOnly
        
    + Body
    
            {
                "id": "B3mTX6pCTRBSIMRej4q0",
                "fullName": "John Smith",
                "email": "john@cleveranalytics.com",
                "status": "ENABLED",
                "preferences": {
                    "language": "en",
                    "lastActiveProject": "/rest/projects/ncesksvg7rjeri7v"                
                },
                "links": [
                    {
                        "rel": "self",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0"
                    },
                    {
                        "rel": "password",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/password"
                    },
                    {
                        "rel": "preferences",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/preferences"
                    }
                ]
            }        

## Token [/rest/oauth/token]
Second phase of authentication.
Change the obtained refresh token - stored in cookie for a CleverAnalytics Access token.
Access token must be present in request header Authentication when calling any secured resources.

### Token [GET]

+ Request (application/json)

    + Headers
    
            Cookie: CA-ApiKeyToken={md5-apikey-id-and-secret}; path=/rest; secure; HttpOnly
    + Body
    
+ Response 200 (application/json)

    + Body

            {
                "accessToken": "eyJTE2fQ.OrCBfdsafsdmGR97-fdsaDd-fsdjfgLCBerU5GHo5NvdwujhjfnI",
                "expiresIn": 900,
                "tokenType": "Bearer"
            }    

# Group Accounts
Global set of user accounts. It contains all information about CleverAnalytics users in current cluster instance.

## Accounts [/rest/accounts]

### Register new Account [POST]

#### Response statuses
* 201 - Created
* 400 - Bad request
* 409 - Conflict - account with this email already exists

+ Request (application/json)

        {
            "givenName": "John",
            "surname": "Smith",
            "email": "john@cleveranalytics.com",
            "password": "SECRET_PASSWORD",
            "preferences": {
                "language": "en",
                "sendNewsletter": true
            },
            "utmParameters": {
                "medium": "facebook",
                "source": "cpc",
                "campaign": "myCampaign",
                "referrer": ""
            }
        }

+ Response 201 (application/json)

        {
            "id": "B3mTX6pCTRBSIMRej4q0",
            "fullName": "John Smith",
            "email": "john@cleveranalytics.com",
            "status": "ENABLED",
            "preferences": {
                "language": "en",
                "sendNewsletter": true
                "lastActiveProject": null
            },
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "password",
                    "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/password"
                },
                {
                    "rel": "preferences",
                    "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/preferences"
                }
            ]                
        }
    
## Accounts [/rest/accounts?email={email}]

### Find Account [GET]
Find a general information about an account identified by `email`. Search is limited on `ENABLED` accounts and
some basic information about the account are returned.

#### Response statuses
* 200 - Ok
* 404 - Not Found

+ Response 200 (application/json)

        {
            "fullName": "John Smith",
            "email": "john@cleveranalytics.com",
            "preferences": {
                "language": "en"
            }                
        }


## Account [/rest/accounts/{accountId}]
Account for user identified *accountId*.
The resource has two type of responses:
* full account datail (request on currently authenticated account)
    * see example response bellow
* restricted account detail - when getting details about another user account
    * `id`, `fullName`, `email` and `status` properties are returned

#### Response statuses
* 200 - OK
* 404 - Not Found

### Get Current Account [GET]
\
+ Request (application/json)

    + Headers
    
            Authorization: Bearer {bearer token}

+ Response 200 (application/json)

    + Body
    
            {
                "id": "B3mTX6pCTRBSIMRej4q0",
                "fullName": "John Smith",
                "email": "john@cleveranalytics.com",
                "status": "ENABLED",
                "preferences": {
                    "language": "en",
                    "lastActiveProject": "/rest/projects/ncesksvg7rjeri7v"                
                },
                "links": [
                    {
                        "rel": "self",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0"
                    },
                    {
                        "rel": "password",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/password"
                    },
                    {
                        "rel": "preferences",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/preferences"
                    }
                ]                
            }

## Current Account [/rest/accounts/current]
Account for user identified by his/her Bearer token. Resource is the same as the */rest/accounts/{accountId}* but is not necessary to know *accountId*.
### Get Current Account [GET]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {bearer token}

+ Response 200 (application/json)

    + Body
    
            {
                "id": "B3mTX6pCTRBSIMRej4q0",
                "fullName": "John Smith",
                "email": "john@cleveranalytics.com",
                "status": "ENABLED",
                "preferences": {
                    "language": "en",
                    "lastActiveProject": "/rest/projects/ncesksvg7rjeri7v"                
                },
                "links": [
                    {
                        "rel": "self",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0"
                    },
                    {
                        "rel": "password",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/password"
                    },
                    {
                        "rel": "preferences",
                        "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/preferences"
                    }
                ]                
            }

## Password for Account [/rest/accounts/{accountId}/password]
Set password for user Account. New password must match all of following restrictions:
* minimal lenght 8 characters
* must contains at least one uppercase character
* must contains at least one lowercase character
* must contains at least one numeric character

#### Response statuses
* 204 - OK - password was changed
* 400 - Bad request or given password does not match conditions above or the old password is invalid
##### Error Codes
    * 400001 - incorrect old password
* 403 - Forbidden - *account* does not match user Account in Bearer *Authorization* header
##### Error Codes
    * 400003 - access to account denied, bearer token does not match requested accountId

#### Security
User is allowed to change only it's own password. It means that Bearer token must match {accountId}

### Change password [PUT]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {bearer token}

    + Body
    
            {
                "oldPassword": "PREVIOUS_PASSWORD",
                "newPassword": "NEW_PASSWORD"
            }
            
+ Response 204

## Reset Password for Account [/rest/accounts/passwordReset]
Ask for resetting password for Account identified by `email`. If the request is accepted, the server sends a confirmation email with random `token` to given email address.

### Send Password Reset Token [POST]
Create a new request for resetting password.

#### Response statuses
* 201 - Created - created a new request for resetting account's password
* 404 - Not Found - no account was found for given email address

#### Security
Unauthorized resource, annonymous users are allowed to ask for reseting the password.

+ Request (application/json)

    + Body
    
            {
                "email": "john@cleveranalytics.com"
            }
            
+ Response 201

## Reset Password for Account [/rest/accounts/passwordReset/{token}]

### Verify Password Reset Token [GET]
Test if given token exists and is valid.

#### Response statuses
* 200 - OK - token exists and is valid
* 404 - Not Found - requested token was not found

#### Security
Unauthorized resource, annonymous users are allowed to verify token.

+ Response 200

### Reset Password [PUT]
Finish the process of reseting the password by sending a valid token and a new password.

#### Response statuses
* 204 - No Content - OK, account password was reset to the new password
* 400 - Bad request or new password does not match minimal requirements for new password. (see above)
* 404 - Not Found - requested token was not found

#### Security
Unauthorized resource, annonymous users are allowed to verify token.

+ Request (application/json)

    + Body
    
            {
                "newPassword": "NEW_PASSWORD"
            }
            
+ Response 204

## Account Preferences [/rest/accounts/{accountId}/preferences]
Preferences for user Account. Structure contains currently two keys:
* language - prefered languge for user (supported values: "en", "cs")
* lastActiveProject - project that was last active for a user
Both these preferences are used by CleverAnalytics Client JavaScript application and have no direct impact on backend behaviour.

#### Response statuses
* 204 - OK - preferences were changed
* 400 - Bad request
##### Error Codes
    * 400002 - unsupported language
* 403 - Forbidden - *account* does not match user Account in Bearer *Authorization* header
##### Error Codes
    * 400003 - access to account denied, bearer token does not match requested accountId

#### Security
User is allowed to read and change only it's own preferences. It means that Bearer token must match {accountId}

### Get account preferences [GET]

+ Response 200
        
        {
            "language": "cs",
            "lastActiveProject": "/rest/projects/ncesksvg7rjeri7v"
        }


### Change preferences [PUT]
Updates the preferences by merge. If some of preference keys is not present, value of this key is NOT reset but only given keys are updated.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer {bearer token}

    + Body
    
            {
                "lastActiveProject": "/rest/projects/kfdkssvg7rjeri1c"
            }
            
+ Response 204

# Group Bootstrap
## Bootstrap [/rest/bootstrap]
### Bootstrap [GET]
Get general information as user details, settings, projects and preferences.

+ Response 200 (application/json)

    + Body
    
            {
                "account": {
                    "id": "B3mTX6pCTRBSIMRej4q0",
                    "fullName": "John Smith",
                    "email": "john@cleveranalytics.com",
                    "status": "ENABLED",
                    "preferences": {
                        "language": "en",
                        "lastActiveProject": "/rest/projects/ncesksvg7rjeri7v"                
                    },
                    "links": [
                        {
                            "rel": "self",
                            "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0"
                        },
                        {
                            "rel": "password",
                            "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/password"
                        },
                        {
                            "rel": "preferences",
                            "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/preferences"
                        }
                    ]                
                },
                "projects": [
                    {
                        "content": [
                            {
                                "id": "ncesksvg7rjeri7v",
                                "title": "Testing project",
                                "description": "Project description",
                                "status": "ENABLED",
                                "share": "PRIVATE",
                                "createdAt": 1415132126985,
                                "modifiedAt": 1415132126985,
                                "membership": {
                                  "id": "he1deh9g0pba0ook",
                                  "accountId": "B3mTX6pCTRBSIMRej4q0",
                                  "role": "ADMIN",
                                  "status": "ENABLED",
                                  "createdAt": 1418366533648,
                                  "modifiedAt": 1418366533648
                                },
                                "links": [
                                    {
                                        "rel": "self",
                                        "href": "/rest/projects/ncesksvg7rjeri7v"
                                    },
                                    {
                                        "rel": "createdBy",
                                        "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                                    },
                                    {
                                      "rel": "membership",
                                      "href": "/rest/projects/ncesksvg7rjeri7v/members?accountId=O3kTMX6pCTRBSIMRej4q0"
                                    },
                                    {
                                        "rel": "members",
                                        "href": "/rest/projects/ncesksvg7rjeri7v/members{?page,size,sort}"
                                    }
                                ]
                            }
                        ],
                        "links": [
                            {
                                "rel": "self",
                                "href": "/rest/projects{?page,size,sort}"
                            }
                        ],
                        "page": {
                            "size": 20,
                            "totalElements": 1,
                            "totalPages": 1,
                            "number": 0
                        }
                    }                
                ]
            }            


# Group Projects
## Projects [/rest/projects{?size,page,sort,share,expand}]
### List Projects [GET]
Get list of projects for authenticated account. 

#### Security
Resource return only those projects where the authenticated user is a member.

+ Parameters
    + size = `20` (optional, number)
    + page = `0` (optional, number)
    + sort = `null` (optional, string, `title`)
    + share = `null` (optional, string, [`DEMO`, `DIMENSION`])
    + expand: `membership` (enum[String], optional)
        Expand selected attribute(s) to minimalize roundtrips.
        + Members
            + `membership` - expand membership attribute

+ Response 200 (application/json)

        {
            "content": [
                {
                    "id": "ncesksvg7rjeri7v",
                    "title": "Testing project",
                    "description": "Project description",
                    "status": "ENABLED",
                    "share": "PRIVATE",
                    "createdAt": 1415132126985,
                    "modifiedAt": 1415132126985,
                    "links": [
                        {
                            "rel": "self",
                            "href": "/rest/projects/ncesksvg7rjeri7v"
                        },
                        {
                            "rel": "createdBy",
                            "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                        },
                        {
                          "rel": "membership",
                          "href": "/rest/projects/ncesksvg7rjeri7v/members?accountId=O3kTMX6pCTRBSIMRej4q0"
                        },
                        {
                            "rel": "members",
                            "href": "/rest/projects/ncesksvg7rjeri7v/members{?page,size,sort}"
                        }
                    ]
                }
            ],
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects{?page,size,sort}"
                }
            ],
            "page": {
                "size": 20,
                "totalElements": 1,
                "totalPages": 1,
                "number": 0
            }
        }

### Create New Project [POST]
Create a new project and set the authenticated user as the project member in *ADMIN* project role.

+ Request (application/json)

        {
            "title": "Testing project",
            "description": "Project description",
            "status": "ENABLED"
        }

+ Response 201 (application/json)

        {
            "id": "ncesksvg7rjeri7v",
            "title": "Testing project",
            "description": "Project description",
            "status": "ENABLED",
            "share": "PRIVATE",
            "createdAt": 1415132126985,
            "modifiedAt": 1415132126985,
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "createdBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                  "rel": "membership",
                  "href": "/rest/projects/ncesksvg7rjeri7v/members?accountId=O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "members",
                    "href": "/rest/projects/ncesksvg7rjeri7v/members{?page,size,sort}"
                }
            ]
        }

## Project [/rest/projects/{project}{?expand}]
### Get Project [GET]
Get project by given project *id*. 

#### Security
Accees is restricted only to users that are members of given project.

+ Parameters 
    + expand: `membership` (enum[String], optional)
        Expand selected attribute(s) to minimalize roundtrips.
        + Members
            + `membership` - expand membership attribute

+ Response 200 (application/json)

        {
            "id": "ncesksvg7rjeri7v",
            "title": "Testing project",
            "description": "Project description",
            "status": "ENABLED",
            "share": "PRIVATE",
            "createdAt": 1415132126985,
            "modifiedAt": 1415132126985,
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "createdBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                  "rel": "membership",
                  "href": "/rest/projects/ncesksvg7rjeri7v/members?accountId=O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "members",
                    "href": "/rest/projects/ncesksvg7rjeri7v/members{?page,size,sort}"
                }
            ]
        }

### Update Project [PUT]
Update the project. 

#### Security
Restricted to *ADMIN* project role.

+ Request (application/json)

        {
            "title": "New Title for Project",
            "description": "Project description",
            "status": "ENABLED"
        }
        
+ Response 200 (application/json)

        {
            "id": "ncesksvg7rjeri7v",
            "title": "New Title for Project",
            "description": "Project description",
            "status": "ENABLED",
            "share": "PRIVATE",
            "createdAt": 1415132126985,
            "modifiedAt": 1415132342323,
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "createdBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                  "rel": "membership",
                  "href": "/rest/projects/ncesksvg7rjeri7v/members?accountId=O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "members",
                    "href": "/rest/projects/ncesksvg7rjeri7v/members{?page,size,sort}"
                }
            ]
        }            
        
### Delete Project [DELETE]
Remove project

#### Security
Restricted to *ADMIN* project role.

+ Response 204 (application/json)

## Members [/rest/projects/{project}/members{?size,page,sort,expand}]
### List Members [GET]
Get list of project members.

#### User Roles
The membership is a relation between Account and Project and Project Role. The role defines set of persmissions. CleverAnalytics supports following project roles:
* VIEWER - can view project dashboards and map views
* EDITOR - extends VIEWER role, it has persmissions to update and delete project metadata
* ADMIN - can manage project and invite new users
* LOAD_DATA - write only role for updating existing dataset (special role for data integration usecase)

#### Security
Restricted to *ADMIN* project role.

+ Parameters 
    + size = `20` (optional, number)
    + page = `0` (optional, number)
    + sort = `null` (optional, string, `role`)
    + expand: `account` (enum[String], optional)
        Expand selected attribute(s) to minimalize roundtrips.
        + Members
            + `account` - expand account attribute

+ Response 200 (application/json)

        {
            "content": [
                {
                    "id": "jfjf0ak3kflam",
                    "accountId": "O3kTMX6pCTRBSIMRej4q0",
                    "role": "ADMIN",
                    "status": "ENABLED",
                    "links": [
                        {
                            "rel": "self",
                            "href": "/rest/projects/ncesksvg7rjeri7v/members/jfjf0ak3kflam"
                        },
                        {
                            "rel": "project",
                            "href": "/rest/projects/ncesksvg7rjeri7v"
                        },
                        {
                            "rel": "account",
                            "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                        }
                    ]
                }
            ],
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/members{?page,size,sort}"
                }
            ],
            "page": {
                "size": 20,
                "totalElements": 8,
                "totalPages": 1,
                "number": 0
            }
        }

### Add new Member [POST]
Add new project member and assign a role.
The user is added into the project without any cooperation (acknowledge) with invited user.

See the Invitation resource too. It allows to invite a new member by email address and sends an invitation email.

#### Security
Restricted to *ADMIN* project role.

+ Response 201 (application/json)

        {
            "accountId": "O3kTMX6pCTRBSIMRej4q0",
            "role": "EDITOR"
            "status": "ENABLED",
        }    


## Membership by accountId [/rest/projects/{project}/members{?accountId,expand}]
### Get Membership by AccountId [GET]
Get membership for given project and accountId

#### Security
Restricted to *ADMIN* project role or is allowed when *accountId* is correspond to authenticated user. 

+ Parameters 
    + accountId: `null` (String, optional)
        id of user account to get
    + expand: `account` (enum[String], optional)
        Expand selected attribute(s) to minimalize roundtrips.
        + Members
            + `account` - expand account attribute
            
+ Response 200 (application/json)

        {
            "id": "jfjf0ak3kflam",
            "accountId": "O3kTMX6pCTRBSIMRej4q0",
            "role": "ADMIN",
            "status": "ENABLED",
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/members/jfjf0ak3kflam"
                },
                {
                    "rel": "project",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "account",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                }
            ]
        }

## Membership [/rest/projects/{project}/members/{membership}]
### Get Membership by Id [GET]
Get detail of user membership in project

#### Security
Restricted to *ADMIN* project role. 

+ Response 200 (application/json)

        {
            "id": "jfjf0ak3kflam",
            "accountId": "O3kTMX6pCTRBSIMRej4q0",
            "role": "ADMIN",
            "status": "ENABLED",
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/members/jfjf0ak3kflam"
                },
                {
                    "rel": "project",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "account",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                }
            ]
        }

### Update Membership [PUT]
Change the user role or status in a project.

#### Response statuses
* 200 - OK
* 400 - Bad request
##### Error Codes
    * 400005 - update of last project admin denied. There needs to be always at least one user in Admin role in each project.
* 403 - Forbidden

#### Security
Restricted to *ADMIN* project role. 

+ Request (application/json)

        {
            "role": "EDITOR",
            "status": "DISABLED"
        }    

+ Response 200 (application/json)

        {
            "id": "jfjf0ak3kflam",
            "accountId": "O3kTMX6pCTRBSIMRej4q0",
            "role": "EDITOR",
            "status": "DISABLED",
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/members/jfjf0ak3kflam"
                },
                {
                    "rel": "account",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                }
            ]
        }
        
### Disable Membership [DELETE]
Disables membership of user in project

#### Response statuses
* 204 - No content
* 400 - Bad request
##### Error Codes
    * 400005 - update of last project admin denied. There needs to be always at least one user in Admin role in each project.
* 403 - Forbidden


#### Security
Restricted to *ADMIN* project role. 

+ Response 204 (application/json)

## Invitations [/rest/projects/{project}/invitations{?status,size,page,sort}]
### List Invitations [GET]
Get list of project invitations. 

#### Security
Restricted to *ADMIN* project role.

+ Parameters 
    + status = `ACCEPTED` (optional, string)
    + size = `20` (optional, number)
    + page = `0` (optional, number)
    + sort = `null` (optional, string, `role`)

+ Response 200 (application/json)

        {
            "content": [
                {
                    "id": "jfjf0ak3kflam",
                    "email": "john.smith@cleveranalytics.com",
                    "role": "VIEWER",
                    "status": "PENDING",
                    "links": [
                        {
                            "rel": "self",
                            "href": "/rest/projects/ncesksvg7rjeri7v/invitation/jfjf0ak3kflam"
                        },
                        {
                            "rel": "project",
                            "href": "/rest/projects/ncesksvg7rjeri7v"
                        },
                        {
                            "rel": "createdBy",
                            "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                        },
                        {
                            "rel": "modifiedBy",
                            "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                        }                                 
                    ]
                }
            ],
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/invitations{?page,size,sort}"
                }
            ],
            "page": {
                "size": 20,
                "totalElements": 8,
                "totalPages": 1,
                "number": 0
            }
        }

### Create New Invitation [POST]
Create a new invitation to the project for a user. User is specified by email address and invitation contains a project role.

#### Response statuses
* 201 - Accepted - new invitation was created
* 400 - Bad request

#### Security
Restricted to *ADMIN* project role.

+ Request (application/json)

        {
            "email": "john.smith@cleveranalytics.com",
            "role": "VIEWER"
        }

+ Response 201 (application/json)

        {
            "id": "qpewijr3sk",
            "email": "john.smith@cleveranalytics.com",
            "role": "VIEWER",
            "status": "PENDING",
            "createdAt": 1415132126985,
            "modifiedAt": 1415132126985,
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/invitation/jfjf0ak3kflam"
                },
                {
                    "rel": "project",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "createdBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "modifiedBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                }                
            ]
        }

## Invitation [/rest/projects/{project}/invitations/{invitation}]
### Get Invitation [GET]
Get detail of an invitation. An invitation status value is one of:
* PENDING
* ACCEPTED
* CANCELED
* EXPIRED

#### Security
Restricted to *ADMIN* project role.

+ Response 200 (application/json)

        {
            "id": "qpewijr3sk",
            "email": "john.smith@cleveranalytics.com",
            "role": "VIEWER",
            "status": "ACCEPTED",
            "createdAt": 1415132126985,
            "modifiedAt": 1415137986911,
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/invitation/jfjf0ak3kflam"
                },
                {
                    "rel": "project",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "createdBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "modifiedBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                }                
            ]
        }

### Update Invitation [PUT]
Cancel or resend project invitation. If an invitation has status PENDING, project Admin can cancel it.
If the invitation has status CANCELED, EXPIRED or PENDING, user can activate it or resend the invivation email by PUTing the status PENDING.

Invitations with status ACCEPTED cannot be updated anymore.
After 30 days the invitation expires if the invited user does not accept it.

Following table describe allowed status transition for invitation:

|original status|PUT request|new status|
|---|---|---|
|CANCELED|PENDING |PENDING |
|EXPIRED |PENDING |PENDING |
|PENDING |CANCELED|CANCELED|

#### Response statuses
* 200 - OK
* 400 - Bad request

#### Security
Restricted to *ADMIN* project role.

+ Request (application/json)

        {
            "status": "PENDING"
        }
        
+ Response 200 (application/json)

        {
            "id": "qpewijr3sk",
            "email": "john.smith@cleveranalytics.com",
            "role": "VIEWER",
            "status": "PENDING",
            "createdAt": 1415132126985,
            "modifiedAt": 1415137986911,
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/invitation/jfjf0ak3kflam"
                },
                {
                    "rel": "project",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "createdBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "modifiedBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                }
            ]
        }

### Cancel Invitation [DELETE]
If an invitation has status PENDING, project Admin can cancel it by calling DELETE method.
Calling of the method DELETE equals to PUT of the state CANCELED above.


#### Security
Restricted to *ADMIN* project role.

+ Response 200 (application/json)

        {
            "id": "qpewijr3sk",
            "email": "john.smith@cleveranalytics.com",
            "role": "VIEWER",
            "status": "CANCELED",
            "createdAt": 1415132126985,
            "modifiedAt": 1415137986911,
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/invitation/jfjf0ak3kflam"
                },
                {
                    "rel": "project",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "createdBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "modifiedBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                }
            ]
        }

## Invitation [/rest/invitations/{invitationHash}]
### Get Invitation [GET]
Get detail of an invitation. An invitation status value is one of:
* PENDING
* ACCEPTED
* CANCELED
* EXPIRED

+ Response 200 (application/json)

        {
            "id": "qpewijr3sk",
            "email": "john.smith@cleveranalytics.com",
            "role": "VIEWER",
            "status": "PENDING",
            "createdAt": 1415132126985,
            "modifiedAt": 1415137986911,
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/invitation/jfjf0ak3kflam"
                },
                {
                    "rel": "project",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "createdBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "modifiedBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "accountDetail",
                    "href": "/rest/accounts/email=john.smith@cleveranalytics.com"
                }
            ]
        }

### Accept Invitation [POST]
This resource allows accepting an invitation by an invited user.
The URL cointains a secret invitationHash that is sent to the invited user by email. 
By clicking on the href link from invitation email, the user is redirected into CleverAnalytics application and after authentication is the invitation accepted.

When user accepts an invitation, he/she is added as a new Memeber of the Project in the role granted by the invitation.

#### Response statuses
* 200 - OK
* 400 - Bad request - invitation cannot be accepted (unexpected invitation state - already accepted, canceled)
* 403 - Forbidden - authenticated user email does not match email in invitation
* 404 - Not found - invitation was not found

#### Security
Restricted to invited user. Authenticated user email must equals to email in the invitation.

+ Response 200 (application/json)

        {
            "id": "qpewijr3sk",
            "email": "john.smith@cleveranalytics.com",
            "role": "VIEWER",
            "status": "ACCEPTED",
            "createdAt": 1415132126985,
            "modifiedAt": 1415137986911,
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/ncesksvg7rjeri7v/invitation/jfjf0ak3kflam"
                },
                {
                    "rel": "project",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                },
                {
                    "rel": "createdBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                },
                {
                    "rel": "modifiedBy",
                    "href": "/rest/accounts/O3kTMX6pCTRBSIMRej4q0"
                }                
            ]
        }

# Group Search
## Search [/rest/projects/{project}/search?query=&viewId=]
### Search [GET] 
Full text search in scope of a View in the Project. 
There are two mandatory request parameters:
* *query* -  Query parameter is a seach string as specified here: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html
* *viewId* - Id of a metadata object View. Previous query is evaluated in the scope of the given View.

+ Response 200 (application/json)

       + Body
    
            {
                {
                  "took" : 132,
                  "timed_out" : false,
                  "_shards" : {
                    "total" : 5,
                    "successful" : 5,
                    "failed" : 0
                  },
                  "hits" : {
                    "total" : 27,
                    "max_score" : 1.1137681,
                    "hits" : [ {
                      "_index" : "demo",
                      "_type" : "stores",
                      "_id" : "215",
                      "_score" : 1.1137681, "_source" : {"nazev":"Prodejna 5","ulice":"Brněnská 1024","obec":"Jihlava","_collection":"1"},
                      "highlight" : {
                        "obec" : [ "<em>Jihlava</em>" ],
                        "nazev" : [ "<em>Prodejna</em> 5" ]
                      }
                    }, {
                      "_index" : "demo",
                      "_type" : "stores",
                      "_id" : "703",
                      "_score" : 1.1137681, "_source" : {"nazev":"Prodejna 14","ulice":"Okružní 15","obec":"Jihlava","_collection":"2"},
                      "highlight" : {
                        "obec" : [ "<em>Jihlava</em>" ],
                        "nazev" : [ "<em>Prodejna</em> 14" ]
                      }
                    }
                    ]
                 }
            }
            
## Search [/rest/projects/{project}/search/load]
### Search [POST] 
Triggers reindex the data from all datasets in the project.

#### Security
Restricted to *ADMIN* project role.

#### Response statuses
* 200 - OK - data was reindexed
* 204 - NO CONTENT - request was accepted but there is no data to be reindexed

+ Response 200 (application/json)

        {
            "_index": "_river",
            "_type": "stores_river",
            "_id": "_meta",
            "_version": 21,
            "created": false
        }
        
# Group Data Warehouse Service
## DWH Query [/rest/projects/{project}/dwh/query{?size,page,sort}]
### Run Query [POST] 
Executes a multidimensional query on datawarehouse. 
Thanks to the query language you are just defining which properities do you want to get 
and you do not case about how get the data. 
The querying properties can be from any datasets (if there is some connection between datasets).

Query service applies a GROUP BY operation on all properties that are NOT aggregated.
In the example bellow the query in SQL syntax would look like: 
```
SELECT 
    catchment_areas.zsj_d_id as zsj_d_id, 
    count(catchment_areas.store_id) as stores_count, 
    avg(transactions.cart_value) as cart_avg 
WHERE customers.customer_value > 1000 
GROUP BY catchment_areas.zsj_d_id
```

List of supported aggregation function:
* function_avg
* function_sum
* function_count
* function_count_dist
* function_max
* function_min
* function_stddev_samp
* function_stddev_pop
* function_var_samp
* function_var_pop

List of supported window functions:
* function_ntile
* function_rank

List of supported arithmetic functions:
* function_plus
* function_minus
* function_multiply
* function_divide
* function_modulo

The WHERE cause of statement is represent by *filterBy* array. The results must match ALL of filters, there is an AND condition between them.
These functions can be used for comparing property with a value: 
* eq
* ne
* lt
* lte
* gt
* gte
* isNull
* isNotNull

#### Response statuses
* 200 - OK - query was successfully executed

+ Parameters 
    + size = `200` (optional, number)
    + page = `0` (optional, number)
    + sort = `null` (optional, string, `transactions.zsj_d_id`)

+ Request (application/json)
        
        {
            "properties": [
                {
                    "id": "zsj_d_id",
                    "type": "property",
                    "value": "transactions.zsj_d_id"
                },
                {
                    "id": "stores_count",
                    "type": "function_count",
                    "content": [{
                        "type": "property",
                        "value": "mystores.store_id"
                    }]
                },
                {
                    "id": "cart_avg",
                    "type": "function_avg",
                    "content": [{
                        "type": "property",
                        "value": "transactions.cart_value"
                    }]
                }
            ],
            "filterBy": [
                {
                    "property": "mycustomers.customer_value",
                    "value": 1000,
                    "operator": "lt"
                }
            ],
            "having": [
                {
                    "propertyId": "stores_count",
                    "value": 5,
                    "operator": "gte"
                }
            ]
        }

+ Response 200 (application/json)

        {
            "content": [
                {
                    "content": {
                        "zsj_d_id": 123,
                        "stores_count": 12,
                        "cart_avg": 452
                    },
                    "links": [ ]
                },
                {
                    "content": {
                        "zsj_d_id": 42,
                        "stores_count": 4,
                        "cart_avg": 320
                    },
                    "links": [ ]
                }
            ],
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/{project}/dwh/query/page=0&size=200"
                },
                {
                    "rel": "next",
                    "href": "/rest/projects/{project}/dwh/query/page=1&size=200"
                }
            ],
            "page": {
                "size": 200,
                "totalElements": 563,
                "totalPages": 3,
                "number": 0
            }
        }

## DWH Explain Query [/rest/projects/{project}/dwh/explain{?size,page,sort}]
### Explain Query [POST] 
This resource is useful for debugging and tuning DWH queries. 
The resource accept standard DWH Query and shows the corresponding SQL statement.

* 200 - OK - query was successfully executed

+ Parameters 
    + size = `200` (optional, number)
    + page = `0` (optional, number)
    + sort = `null` (optional, string, `transactions.zsj_d_id`)

+ Request (application/json)
        
        {  
           "properties":[  
              {  
                 "id":"geometry",
                 "type":"property",
                 "value":"restaurant_phx.geometry"
              }
           ],
           "filterBy":[  
              {  
                 "property":"restaurant_phx.stars",
                 "operator":"gte",
                 "value":3
              },
              {  
                 "property":"restaurant_phx.stars",
                 "operator":"lte",
                 "value":5
              },
              {  
                 "property":"restaurant_phx.review_count",
                 "operator":"gte",
                 "value":0
              },
              {  
                 "property":"restaurant_phx.review_count",
                 "operator":"lte",
                 "value":1800
              }
           ]
        }        
        
+ Response 200 (text/plain)

        select *
        from (
          with "no_agg_func" as (
            select restaurant_phx.geometry as "geometry"
            from restaurant_phx
            where (
              restaurant_phx.stars >= 3
              and restaurant_phx.stars <= 5
              and restaurant_phx.review_count >= 0
              and restaurant_phx.review_count <= 1800
            )
            group by restaurant_phx.geometry
          )
          select 
            coalesce(no_agg_func.geometry) as "geometry", 
            count(*) over () as "total_rows_count"
          from no_agg_func
          group by 1
          order by 1 asc
        ) as "inner"
        limit 200
        

## DWH Metric Range [/rest/projects/{project}/dwh/metricRange]
### Metric Range Values [POST] 
Executes a multidimensional query and returns the range values for all given metrics.
The range values depends on a granularity  - that is defined by query properties.

The resource returns for each metrics:
* *min* - minimal value for metric in given scope
* *max* - maximal value for metric in given scope

Following example returns the `min` and `max` of *stores_count* and *turnover* from all states. The customers with `turnover < 1000` are not calculated.

+ Request (application/json)
        
        {
            "properties": [
                {
                    "id": "state",
                    "type": "property",
                    "value": "state.id"
                },
                {
                    "id": "stores_count",
                    "type": "function_count_dist",
                    "content": [{
                        "type": "property",
                        "value": "mystores.store_id"
                    }]
                },
                {
                    "id": "turnover",
                    "type": "function_sum",
                    "content": [{
                        "type": "property",
                        "value": "transactions.amount"
                    }]
                }
            ],
            "filterBy": [
                {
                    "property": "mycustomers.customer_value",
                    "value": 1000,
                    "operator": "lt"
                }
            ]
        }

+ Response 200 (application/json)

        {
            "content": [
                 {
                    "propertyId": "stores_count",
                    "min": 5,
                    "max": 452
                },
                {
                    "propertyId": "turnover",
                    "min": 5456,
                    "max": 1024453
                }
            ]
        }


## Property Values [/rest/projects/{project}/dwh/values{?property,size,page,dir}]
### Get Property Values [GET]
Gets list of distinct values of given dataset's property. The property is set by mandatory parameter `property`. 
The distinct values are returned as pageable response.

+ Parameters 
    + property (required, string)
    + size = `200` (optional, number)
    + page = `0` (optional, number)
    + dir = `asc` (optional, string, `asc` or `desc`)
    
+ Response 200 (application/json)

        {
            "content": [
                "Brno-město",
                "Brno-venkov",
                "Břeclav"
            ],
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/projects/{project}/dwh/values?property=okres.nazev&dir=asc&page=0"
                },
                {
                    "rel": "next",
                    "href": "/rest/projects/{project}/dwh/values?property=okres.nazev&dir=asc&page=1"
                }
            ],
            "page": {
                "size": 200,
                "totalElements": 563,
                "totalPages": 3,
                "number": 0
            }
        }    


## DWH Upload [/rest/projects/{project}/dwh/data/uploads]
### Upload Data [POST] 
This resource allows to upload the data file (CSV) to internal storage. The request body is a uploaded file. 
Request is a multipart/form-data mimetype. The origin file name is used as remote file name.
Example in CuRL: 

    curl -X POST -H "Accept: application/json" -H "Authorization: Bearer eyJhbGc..." \
         -H "Content-Type: multipart/form-data; boundary=----WebKitFormBoundary" \
         -F "file=test.csv" \
         'https://secure.cleveranalytics.com/rest/projects/ncesksvg7rjeri7v/dwh/data/uploads'

#### Security
Restricted to *LOAD_DATA* or *ADMIN* project role that have permission to load data into the project

+ Request (*/*)

+ Response 200 (application/json)

        {
            "size": 22545124,
            "createdAt": 1415132126985,
            "md5": "apYJEA2r4rFbzzn1xRJB7g==",
            "links": [
                {
                    "rel": "self",
                    "href": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/uploads/ncesksvg7rjeri7v/test.csv"
                },
                {
                    "rel": "project",
                    "href": "/rest/projects/ncesksvg7rjeri7v"
                }
        }

## DWH Pull [/rest/projects/{project}/dwh/data/pull]
### Pull Data into Dataset [POST] 
Resource for importing given data into data warehouse.
Data are being pulled from given *upload* to target *dataset*. There are supported two import modes:
* full - the existing data in current dataset are completely replace by given data
* incremental - the data from given *file* are added as new rows to existing data table

The parameter *type* specify a format of input data. List of supported data *type*s:
* csv


The *csvOptions* section is optional, default values are:
* header: true
* separator: ,
* quote: "
* escape: \\

Currently, this resource does not support asynchronous processing. This means that the size of loaded file is limited to 1 minute timeout.

#### Security
Restricted to *LOAD_DATA* or *ADMIN* project role that have permission to load data into the project

+ Request (application/json)

        {
            "dataset": "mystores",
            "mode": "full",
            "upload": "/rest/accounts/B3mTX6pCTRBSIMRej4q0/uploads/ncesksvg7rjeri7v/test.csv",
            "type": "csv",
            "csvOptions": 
                {
                    "header": true,
                    "separator": ",",
                    "quote": "\"",
                    "escape": "\\"
                }
        }


+ Response 204 (application/json)

## DWH Dataset Dump [/rest/projects/{project}/dwh/data/dumps]
### Dump Dataset [POST] 
This resource allows to dump all data from given dataset into a file (CSV). 
The dump file is then stored on local storage and ready to download. 
The main purpose of this resource is allow to backup or migrate data from project on dataset granularity.

The request contains a list of dataset names to be dumped. All datasets dumped by the requests gets the same *dumpId*. 
TODO: implement a project lock to grant a consistency between datasets.

Currently, there is support only the CSV format of dumps.

#### Security
Restricted to *ADMIN* project role that have permission to dump data from the project

+ Request (applicatoin/json)

        [
            { 
              "dataset" : "mystores"
            },
            { 
              "dataset" :"zones"
            }
        ]

+ Response 200 (application/json)

        {
          "content": [
            {
              "dataset": "mystores",
              "dumpId": "1460405219364",
              "fileLength": 1878,
              "links": [
                {
                  "rel": "self",
                  "href": "/rest/projects/ncesksvg7rjeri7v/dwh/data/dumps/1460405219364/mystores.csv"
                }
              ]
            },
            {
              "dataset": "zones",
              "dumpId": "1460405219364",
              "fileLength": 1107237,
              "links": [
                {
                  "rel": "self",
                  "href": "/rest/projects/ncesksvg7rjeri7v/dwh/data/dumps/1460405219364/zones.csv"
                }
              ]
            }
          ],
          "links": [],
          "page": {
            "size": 2,
            "totalElements": 2,
            "totalPages": 1,
            "number": 0
          }
        }

## DWH Dataset Dump File [/rest/projects/{project}/dwh/data/dumps/{dumpId}/{file}]
### Get Dataset Dump File [GET] 
When the dump process is done, the *dumps* resource returns links for downloading the dumped files. The dumps are available for next 24 hour and then removed.

##### The output CSV file format is:

* HEADER - first line is a heacder
* DELIMITER ',' - cells are delimiter by comma

#### Security
Restricted to *ADMIN* project role that have permission to dump data from the project

+ Response 200 (text/csv)

## DWH Validations [/rest/projects/{project}/dwh/validations]
### Validate DWH [POST] 
Create new task to validate model and data intetagrity of datawarehouse. 

#### Types of validation
* modelValidator - validates DWH tables regards datasets metadata. Compares that the logical dataset model is synchronized with physical model of DWH DB tables.
* dataValidator - validate data integrity. Check that the primary keys are unique and the reference integrity of foreign keys.


#### Validation Errors

|violation type|validator|desctiption|
|----|----|----|
|missingTable|modelValidator|no table was found for dataset|
|missingPrimaryKeyColumn|modelValidator|declared primary key column was not found|
|notUniquePrimaryKey|dataValidator|primary key is not unique|
|missingColumn|modelValidator|column for property was not found in db table|
|misorderColumn|modelValidator|column position in table does not match the dataset property position|
|unexpectedColumn|modelValidator|column table is not defined in dataset metadata object|
|notMatchingDataTypeColumn|modelValidator|data type of column does not match dataset property type|
|mismatchingForeignKeyDataType|modelValidator|type of foreignKey does not match type of primary key of referenced dataset|
|violationReferenceIntegrity|dataValidator|reference integrity is violated between given datasets|
|validationError|dataValidator/modelValidator|general error when executing validation task|

#### Security
Restricted to *LOAD_DATA* or *ADMIN* project role that have permission to run validation tasks.

+ Request (applicatoin/json)

        
        { 
            "modelValidator" : {
            },
            "dataValidator": {
            }
        }

+ Response 200 (application/json)

        {
            "violations": [
                {
                    "violationType": "missingTable",
                    "message": "Missing DWH database table=customer_tab for dataset=customers",
                    "parameters": {
                        {
                            "name": "table",
                            "value": "customer_tab"
                        },
                        {
                            "name": "dataset",
                            "value": "customers"
                        }
                    ]
                },
                {
                    "violationType": "violationReferenceIntegrity",
                    "message": "Reference integrity violation in foreign key table=customer_tab column=transaction_id of dataset=customers referencing dataset=transactions",
                    "parameters": [
                        {
                            "table": "customer_tab",
                            "column": "transaction_id",
                            "dataset": "customers",
                            "targetDataset": "transactions"
                            "name": "table",
                            "value": "customer_tab"
                        },
                        {
                            "name": "column",
                            "value": "transaction_id"
                        },
                        {
                            "name": "dataset",
                            "value": "customers"
                        },
                        {
                            "name": "targetDataset",
                            "value": "transactions"
                        }
                    ],
                    "dataSample": [73664, 84387, 848482]
                }
            ]
        }

# Group Export
## Export Data [/rest/projects/{project}/export]
### Export Data by Query [POST] 
Resource exports a given query to requested format and allow to configure some output options.

Export output formats:
* xlsx (excel file)
* csv (not implemented yet)

#### Specific Output Formats Options
Exporter allows to optionaly specify a additional output options for specific output format. Following structure shows the default options for CSV:

##### CSV Default Options

    "csvOptions": {
        "header": true,
        "separator": ",",
        "quote": "\"",
        "escape": "\\"
    }

##### Excel Default Options

    "xlsxOptions": {
        "autofilter": [
            {
                "propertyId": "cart_avg",
                "value": 300,
                "operator": "gte"
            }
        ]
    }
    
###### Autofilter Option
Enable the autofiltering for the first row in the exported Excel spreadsheet. 
The autofilter set the filter on given properties (columns) identified by propertyId and values specified in autofilter array.

+ Request (application/json)

        {
            "filename": "customers-transactions",
            "format": "csv",
            "query": {
                "properties": [
                    {
                        "id": "zsj_d_id",
                        "type": "property",
                        "value": "transactions.zsj_d_id"
                    },
                    {
                        "id": "stores_count",
                        "type": "function_count",
                        "content": [{
                            "type": "property",
                            "value": "mystores.store_id"
                        }]
                    },
                    {
                        "id": "cart_avg",
                        "type": "function_avg",
                        "content": [{
                            "type": "property",
                            "value": "transactions.cart_value"
                        }]
                    }
                ],
                "filterBy": [
                    {
                        "property": "mycustomers.customer_value",
                        "value": 1000,
                        "operator": "lt"
                    }
                ]
            },
            "csvOptions": {
                "header": true,
                "separator": ",",
                "quote": "\"",
                "escape": "\\"
            }
        }

+ Response 200 (text/csv)

        zsj_d_id, stores_count, cart_avg
        2387, 12, 452.3
        987, 5, 388.1
        1901, 3, 298




# Group Metadata
## Datasets [/rest/projects/{project}/metadata/datasets.json]
### Get Datasets [GET] 

+ Response 200 (application/json)

        [
            {
                "name": "zsjd",
                "properties": {
                    "period": "2015"
                },
                "searchBy": ["nazev"],
                "ref": {
                    "type": "wfs",
                    "workspace": "$projectId",
                    "layer": "zsjd",
                    "primaryKey": "zsjd_id"
                }
            },
            {
                "name": "mystores",
                "properties": {
                    "period": "4/2014-3/2015"
                },
                "searchBy": ["name","street","city"],
                "ref": {
                    "type": "dwh",
                    "table": "stores",
                    "primaryKey": "id",
                    "properties": [
                        {
                            "name": "id",
                            "column": "id",
                            "type": "integer"
                        },
                        {
                            "name": "name",
                            "column": "name",
                            "type": "string"
                        },
                        {
                            "name": "office_hours_11",
                            "column": "office_hours_11",
                            "type": "boolean"
                        }
                    ]
                }
            },
            {
                "name": "can-dim-demographic-cz",
                "title": "Demografická dimenze CZ",
                "ref": {
                    "type": "dwh",
                    "table": "dim_demographic_cz",
                    "primaryKey": "kod_zsj_d",
                    "properties": [
                        {
                            "name": "kod_zsj_d",
                            "title": "Kód ZSJ Díl",
                            "column": "kod_zsj_d",
                            "type": "string"
                        },
                        {
                            "name": "population_all_men",
                            "title": "Obyvatelstvo celkem - muži",
                            "column": "u112100103",
                            "type": "integer"
                        },
                        {
                            "name": "population_avg_age_men",
                            "title": "Obyvatelstvo - průměrný věk  - muži",
                            "column": "u112102803",
                            "type": "integer"
                        },
                        {
                            "type": "foreignKey",
                            "column": "kodzsjd",
                            "foreignKey": "can-dim-area-cz"
                        }
                    ]
                }
        ]